"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5066],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var s=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=s.createContext({}),p=function(e){var n=s.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return s.createElement(i.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},u=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,g=m["".concat(i,".").concat(u)]||m[u]||d[u]||o;return t?s.createElement(g,a(a({ref:n},c),{},{components:t})):s.createElement(g,a({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=u;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[m]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=t[p];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}u.displayName="MDXCreateElement"},90238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var s=t(87462),r=(t(67294),t(3905));const o={title:"PostgresQL",sidebar_label:"PostgresQL",hide_title:!0,hide_table_of_contents:!1,slug:"postgres"},a=void 0,l={unversionedId:"deploy/postgresql",id:"deploy/postgresql",title:"PostgresQL",description:"\u53c2\u8003\u6587\u6863\uff1a",source:"@site/docs/develop/deploy/postgresql.md",sourceDirName:"deploy",slug:"/deploy/postgres",permalink:"/docusaurus/docs/develop/deploy/postgres",draft:!1,editUrl:"https://github.com/czasg/docusaurus/edit/main/docs/develop/deploy/postgresql.md",tags:[],version:"current",frontMatter:{title:"PostgresQL",sidebar_label:"PostgresQL",hide_title:!0,hide_table_of_contents:!1,slug:"postgres"},sidebar:"tutorialSidebar",previous:{title:"Nginx",permalink:"/docusaurus/docs/develop/deploy/nginx"},next:{title:"RabbitMQ",permalink:"/docusaurus/docs/develop/deploy/rabbitmq"}},i={},p=[{value:"\u53c2\u8003\u6587\u6863\uff1a",id:"\u53c2\u8003\u6587\u6863",level:4},{value:"Docker \u90e8\u7f72",id:"docker-\u90e8\u7f72",level:3},{value:"DockerCompose \u90e8\u7f72",id:"dockercompose-\u90e8\u7f72",level:3},{value:"K8S \u90e8\u7f72",id:"k8s-\u90e8\u7f72",level:3},{value:"KV-DB3 \u90e8\u7f72",id:"kv-db3-\u90e8\u7f72",level:3}],c={toc:p},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,s.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"\u53c2\u8003\u6587\u6863"},"\u53c2\u8003\u6587\u6863\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/bitnami/postgresql"},"https://hub.docker.com/r/bitnami/postgresql"))),(0,r.kt)("h3",{id:"docker-\u90e8\u7f72"},"Docker \u90e8\u7f72"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -it --name postgresql --hostname postgresql -p 5432:5432 \\\n    -v /path/to/postgresql-persistence:/bitnami/postgresql \\\n    -e POSTGRESQL_USERNAME=my_user \\\n    -e POSTGRESQL_PASSWORD=password123 \\\n    -e POSTGRESQL_DATABASE=my_database \\\n    bitnami/postgresql:latest\n")),(0,r.kt)("h3",{id:"dockercompose-\u90e8\u7f72"},"DockerCompose \u90e8\u7f72"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="\u4e3b\u4ece\u96c6\u7fa4"',title:'"\u4e3b\u4ece\u96c6\u7fa4"'},"version: '2'\nservices:\n  postgresql-master:\n    image: 'bitnami/postgresql:latest'\n    ports:\n      - '5432'\n    volumes:\n      - 'postgresql_master_data:/bitnami/postgresql'\n    environment:\n      - POSTGRESQL_REPLICATION_MODE=master\n      - POSTGRESQL_REPLICATION_USER=repl_user\n      - POSTGRESQL_REPLICATION_PASSWORD=repl_password\n      - POSTGRESQL_USERNAME=my_user\n      - POSTGRESQL_PASSWORD=my_password\n      - POSTGRESQL_DATABASE=my_database\n  postgresql-slave:\n    image: 'bitnami/postgresql:latest'\n    ports:\n      - '5432'\n    depends_on:\n      - postgresql-master\n    environment:\n      - POSTGRESQL_REPLICATION_MODE=slave\n      - POSTGRESQL_REPLICATION_USER=repl_user\n      - POSTGRESQL_REPLICATION_PASSWORD=repl_password\n      - POSTGRESQL_MASTER_HOST=postgresql-master\n      - POSTGRESQL_PASSWORD=my_password\n      - POSTGRESQL_MASTER_PORT_NUMBER=5432\nvolumes:\n  postgresql_master_data:\n")),(0,r.kt)("h3",{id:"k8s-\u90e8\u7f72"},"K8S \u90e8\u7f72"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: postgres\n  name: postgres\nspec:\n  replicas: 1\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: postgres\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: postgres\n      annotations:\n        co.elastic.logs: "false"\n        co.elastic.logs/enabled: "false"\n        co.elastic.logs/json.add_error_key: "true"\n        co.elastic.logs/json.ignore_decoding_error: "true"\n        co.elastic.logs/json.keys_under_root: "false"\n        co.elastic.logs/processors.add_fields.fields.index: elk-index-postgres\n        co.elastic.logs/processors.timestamp.field: json.time\n        co.elastic.logs/processors.timestamp.layouts: UNIX_MS\n        co.elastic.logs/processors.timestamp.timezone: Asia/Shanghai\n    spec:\n      hostname: postgres\n      containers:\n        - image: bitnami/postgresql:latest\n          imagePullPolicy: Always\n          envFrom:\n            - configMapRef:\n                name: postgres\n          name: postgres\n          livenessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 300\n            periodSeconds: 20\n            successThreshold: 1\n            tcpSocket:\n              port: 5432\n            timeoutSeconds: 5\n          readinessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 5\n            periodSeconds: 40\n            successThreshold: 1\n            tcpSocket:\n              port: 5432\n            timeoutSeconds: 2\n          ports:\n            - containerPort: 5432\n              name: postgres\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 1000Mi\n            requests:\n              cpu: 100m\n              memory: 100Mi\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n            - mountPath: /bitnami/postgresql\n              name: storage\n      restartPolicy: Always\n      volumes:\n        - name: host-time\n          hostPath:\n            path: /etc/localtime\n            type: ""\n        - name: storage\n          emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\nspec:\n  ports:\n    - name: postgres5432\n      port: 5432\n      protocol: TCP\n      targetPort: 5432\n  selector:\n    app: postgres\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres-nodeport\nspec:\n  ports:\n    - name: postgres-nodeport\n      port: 5432\n      protocol: TCP\n      targetPort: 5432\n  selector:\n    app: postgres\n  sessionAffinity: None\n  type: NodePort\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: postgres\ndata:\n  POSTGRESQL_USERNAME: "my_user"\n  POSTGRESQL_PASSWORD: "my_password"\n  POSTGRESQL_DATABASE: "my_database"\n')),(0,r.kt)("h3",{id:"kv-db3-\u90e8\u7f72"},"KV-DB3 \u90e8\u7f72"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kvdb3\n  name: kvdb3\nspec:\n  replicas: 1\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: kvdb3\n  template:\n    metadata:\n      labels:\n        app: kvdb3\n    spec:\n      initContainers:\n        - image: busybox:latest\n          name: fill-pgdata\n          command: ["sh", "-c", "cp -r /data/* /pgdata/"]\n          volumeMounts:\n            - mountPath: /pgdata\n              name: pgdata\n            - mountPath: /data\n              name: data\n      containers:\n        - image: postgres:latest\n          imagePullPolicy: Always\n          name: postgres\n          lifecycle:\n            postStart:\n              exec:\n                command: ["/bin/sh", "-c", "while ! pg_isready ; do sleep 3; done; echo success;"]\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 2000Mi\n            requests:\n              cpu: 1000m\n              memory: 2000Mi\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n            - mountPath: /var/lib/postgresql/data\n              name: pgdata\n      restartPolicy: Always\n      volumes:\n        - hostPath:\n            path: /etc/localtime\n            type: ""\n          name: host-time\n        - name: pgdata\n          emptyDir: {}\n        - name: data\n          emptyDir: {}\n')))}d.isMDXComponent=!0}}]);