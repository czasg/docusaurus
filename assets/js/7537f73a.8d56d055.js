"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7355],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=l(n),d=o,g=m["".concat(i,".").concat(d)]||m[d]||u[d]||s;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8031:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],c={title:"postgres"},i=void 0,l={unversionedId:"postgres/postgres",id:"postgres/postgres",isDocsHomePage:!1,title:"postgres",description:"docker",source:"@site/docs-deploy/postgres/postgres.md",sourceDirName:"postgres",slug:"/postgres/postgres",permalink:"/docusaurus/deploy/postgres/postgres",tags:[],version:"current",frontMatter:{title:"postgres"},sidebar:"tutorialSidebar",previous:{title:"nginx",permalink:"/docusaurus/deploy/nginx/nginx"},next:{title:"rabbitmq",permalink:"/docusaurus/deploy/rabbitmq/rabbitmq"}},p=[{value:"docker",id:"docker",children:[],level:2},{value:"kubectl",id:"kubectl",children:[],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"docker"},"docker"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"docker volume create pgdata\ndocker run -it --rm --name postgres \\\n    -e POSTGRES_USER=postgres \\\n    -e POSTGRES_PASSWORD=postgres \\\n    -e POSTGRES_DB=postgres \\\n    -v pgdata:/var/lib/postgresql/data \\\n    -p 5432:5432 \\\n    postgres:latest\n")),(0,s.kt)("h2",{id:"kubectl"},"kubectl"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: postgres\n  name: postgres\nspec:\n  replicas: 2\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: postgres\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: postgres\n      annotations:\n        co.elastic.logs: "true"\n        co.elastic.logs/enabled: "true"\n        co.elastic.logs/json.add_error_key: "true"\n        co.elastic.logs/json.ignore_decoding_error: "true"\n        co.elastic.logs/json.keys_under_root: "false"\n        co.elastic.logs/processors.timestamp.field: json.time\n        co.elastic.logs/processors.timestamp.layouts: UNIX_MS\n        co.elastic.logs/processors.timestamp.timezone: Asia/Shanghai\n        co.elastic.logs/processors.add_fields.fields.index: "postgres-test"\n    spec:\n      containers:\n        - name: postgres\n          image: postgres:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 5432\n              name: 5432tcp\n              protocol: TCP\n          lifecycle:\n            postStart:\n              exec:\n                command: ["sh", "-c", "while ! pg_isready; do sleep 3; done; echo success;"]\n          readinessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 10\n            periodSeconds: 60\n            successThreshold: 2\n            tcpSocket:\n               port: 5432\n            timeoutSeconds: 10\n          resources:\n            limits:\n              cpu: 200m\n              memory: 200Mi\n            requests:\n              cpu: 200m\n              memory: 200Mi\n          nodeSelector:\n            kubernetes.io/hostname: machine-1\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n            - mountPath: /etc/lib/postgresql/data\n              name: pgdata\n      restartPolicy: Always\n      volumes:\n        - name: host-time\n          hostPath:\n            path: /etc/localtime\n            type: ""\n        - name: pgdata\n          hostPath:\n            path: /postgres/data\n            type: DirectoryOrCreate\n')))}m.isMDXComponent=!0}}]);