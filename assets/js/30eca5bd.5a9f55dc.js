"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9019],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),u=o,m=d["".concat(l,".").concat(u)]||d[u]||k[u]||r;return t?a.createElement(m,s(s({ref:n},p),{},{components:t})):a.createElement(m,s({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},78029:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>k,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const r={title:"Kafka",sidebar_label:"Kafka",hide_title:!0,hide_table_of_contents:!1,slug:"kafka"},s=void 0,i={unversionedId:"deploy/kafka",id:"deploy/kafka",title:"Kafka",description:"\u53c2\u8003\u6587\u6863\uff1a",source:"@site/docs/develop/deploy/kafka.md",sourceDirName:"deploy",slug:"/deploy/kafka",permalink:"/docusaurus/docs/develop/deploy/kafka",draft:!1,editUrl:"https://github.com/czasg/docusaurus/edit/main/docs/develop/deploy/kafka.md",tags:[],version:"current",frontMatter:{title:"Kafka",sidebar_label:"Kafka",hide_title:!0,hide_table_of_contents:!1,slug:"kafka"},sidebar:"tutorialSidebar",previous:{title:"Confluence",permalink:"/docusaurus/docs/develop/deploy/confluence"},next:{title:"MongoDB",permalink:"/docusaurus/docs/develop/deploy/mongo"}},l={},c=[{value:"\u53c2\u8003\u6587\u6863\uff1a",id:"\u53c2\u8003\u6587\u6863",level:4},{value:"Docker \u90e8\u7f72",id:"docker-\u90e8\u7f72",level:3},{value:"K8S \u90e8\u7f72",id:"k8s-\u90e8\u7f72",level:3}],p={toc:c},d="wrapper";function k(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"\u53c2\u8003\u6587\u6863"},"\u53c2\u8003\u6587\u6863\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/bitnami/kafka"},"https://hub.docker.com/r/bitnami/kafka"))),(0,o.kt)("h3",{id:"docker-\u90e8\u7f72"},"Docker \u90e8\u7f72"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -it --name kafka --hostname kafka -p 9092:9092 \\\n    -e KAFKA_CFG_NODE_ID=0 \\\n    -e KAFKA_CFG_PROCESS_ROLES=controller,broker \\\n    -e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 \\\n    -e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT \\\n    -e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093 \\\n    -e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \\\n    bitnami/kafka:latest\n")),(0,o.kt)("h3",{id:"k8s-\u90e8\u7f72"},"K8S \u90e8\u7f72"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: kafka\n  name: kafka\nspec:\n  replicas: 1\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: kafka\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: kafka\n      annotations:\n        co.elastic.logs: "false"\n        co.elastic.logs/enabled: "false"\n        co.elastic.logs/json.add_error_key: "true"\n        co.elastic.logs/json.ignore_decoding_error: "true"\n        co.elastic.logs/json.keys_under_root: "false"\n        co.elastic.logs/processors.add_fields.fields.index: elk-index-kafka\n        co.elastic.logs/processors.timestamp.field: json.time\n        co.elastic.logs/processors.timestamp.layouts: UNIX_MS\n        co.elastic.logs/processors.timestamp.timezone: Asia/Shanghai\n    spec:\n      hostname: kafka\n      containers:\n        - image: bitnami/kafka:latest\n          imagePullPolicy: Always\n          env:\n            - name: KAFKA_HEAP_OPTS\n              value: -Xmx1G -Xms1G\n            - name: KAFKA_OPTS\n              value: -Dlogging.level=INFO\n          envFrom:\n            - configMapRef:\n                name: kafka\n          name: kafka\n          livenessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 300\n            periodSeconds: 20\n            successThreshold: 1\n            tcpSocket:\n              port: 9092\n            timeoutSeconds: 5\n          readinessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 5\n            periodSeconds: 40\n            successThreshold: 1\n            tcpSocket:\n              port: 9092\n            timeoutSeconds: 2\n          ports:\n            - containerPort: 9092\n              name: kafka\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 1000Mi\n            requests:\n              cpu: 100m\n              memory: 100Mi\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n      restartPolicy: Always\n      volumes:\n        - hostPath:\n            path: /etc/localtime\n            type: ""\n          name: host-time\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: kafka\nspec:\n  ports:\n    - name: kafka9092\n      port: 9092\n      protocol: TCP\n      targetPort: 9092\n    - name: kafka9093\n      port: 9093\n      protocol: TCP\n      targetPort: 9093\n  selector:\n    app: kafka\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: kafka-nodeport\nspec:\n  ports:\n    - name: kafka-nodeport\n      port: 9092\n      protocol: TCP\n      targetPort: 9092\n  selector:\n    app: kafka\n  sessionAffinity: None\n  type: NodePort\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kafka\ndata:\n  KAFKA_CFG_NODE_ID: "0"\n  KAFKA_CFG_PROCESS_ROLES: "controller,broker"\n  KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"\n  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"\n  KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"\n  KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"\n---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: kafka\n  annotations:\n    nginx.ingress.kubernetes.io/proxy-body-size: "5M"\n    nginx.ingress.kubernetes.io/proxy-connect-timeout: "1200"\n    nginx.ingress.kubernetes.io/proxy-send-timeout: "1200"\n    nginx.ingress.kubernetes.io/proxy-read-timeout: "1200"\nspec:\n  rules:\n    - host: kafka.domain\n      http:\n        paths:\n          - backend:\n              serviceName: kafka\n              servicePort: 9092\n')))}k.isMDXComponent=!0}}]);