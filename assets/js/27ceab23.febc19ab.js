"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1006],{3905:function(e,n,r){r.d(n,{Zo:function(){return d},kt:function(){return u}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},d=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=l(r),u=o,f=m["".concat(c,".").concat(u)]||m[u]||p[u]||s;return r?t.createElement(f,a(a({ref:n},d),{},{components:r})):t.createElement(f,a({ref:n},d))}));function u(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=r[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1730:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return m}});var t=r(7462),o=r(3366),s=(r(7294),r(3905)),a=["components"],i={title:"redis"},c=void 0,l={unversionedId:"redis/redis",id:"redis/redis",isDocsHomePage:!1,title:"redis",description:"redis \u914d\u7f6e\u6a21\u677f",source:"@site/docs-deploy/redis/redis.md",sourceDirName:"redis",slug:"/redis/redis",permalink:"/docusaurus/deploy/redis/redis",tags:[],version:"current",frontMatter:{title:"redis"},sidebar:"tutorialSidebar",previous:{title:"rabbitmq",permalink:"/docusaurus/deploy/rabbitmq/rabbitmq"}},d=[{value:"redis \u914d\u7f6e\u6a21\u677f",id:"redis-\u914d\u7f6e\u6a21\u677f",children:[],level:2},{value:"docker",id:"docker",children:[],level:2},{value:"docker-compose",id:"docker-compose",children:[],level:2},{value:"kubectl",id:"kubectl",children:[],level:2}],p={toc:d};function m(e){var n=e.components,r=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"redis-\u914d\u7f6e\u6a21\u677f"},"redis \u914d\u7f6e\u6a21\u677f"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="redis.conf"',title:'"redis.conf"'},"appendonly  no\ndatabases  16\nmaxmemory  200mb\nmaxmemory-policy  allkeys-lru\nprotected-mode  no\n")),(0,s.kt)("h2",{id:"docker"},"docker"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell",metastring:'script title="\u90e8\u7f72 redis"',script:!0,title:'"\u90e8\u7f72','redis"':!0},"docker run -it --rm --name redis-server \\\n    -v data:/data \\\n    -v redis.conf:/rds/redis.conf \\\n    -p 6379:6379 \\\n    redis:latest redis-server /rds/redis.conf\n")),(0,s.kt)("h2",{id:"docker-compose"},"docker-compose"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="docker-compose.yaml"',title:'"docker-compose.yaml"'},'version: "2.3"\nservices:\n  redis:\n    image: redis:latest\n    ports:\n    - "6379:6379"\n    volumes:\n      - "data:/data"\n      - "redis.conf:/rds/redis.conf"\n')),(0,s.kt)("h2",{id:"kubectl"},"kubectl"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="redis-deploy.yaml"',title:'"redis-deploy.yaml"'},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: redis\n  name: redis\nspec:\n  replicas: 2\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: redis\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: redis\n      annotations:\n        co.elastic.logs: "true"\n        co.elastic.logs/enabled: "true"\n        co.elastic.logs/json.add_error_key: "true"\n        co.elastic.logs/json.ignore_decoding_error: "true"\n        co.elastic.logs/json.keys_under_root: "false"\n        co.elastic.logs/processors.timestamp.field: json.time\n        co.elastic.logs/processors.timestamp.layouts: UNIX_MS\n        co.elastic.logs/processors.timestamp.timezone: Asia/Shanghai\n        co.elastic.logs/processors.add_fields.fields.index: "redis-test"\n    spec:\n      containers:\n        - name: redis\n          image: redis:latest\n          imagePullPolicy: Always\n          command: ["sh", "-c", "redis-server /rds/redis.conf"]\n          ports:\n            - containerPort: 6379\n              name: 6379tcp\n              protocol: TCP\n          readinessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 10\n            periodSeconds: 30\n            successThreshold: 2\n            tcpSocket:\n               port: 6379\n            timeoutSeconds: 10\n          livenessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 10\n            periodSeconds: 60\n            successThreshold: 1\n            tcpSocket:\n              port: 6379\n            timeoutSeconds: 20\n          resources:\n            limits:\n              cpu: 200m\n              memory: 200Mi\n            requests:\n              cpu: 200m\n              memory: 200Mi\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n            - mountPath: /rds/redis.conf\n              name: redis-conf\n              subPath: config\n      restartPolicy: Always\n      volumes:\n        - name: host-time\n          hostPath:\n            path: /etc/localtime\n            type: ""\n        - name: redis-conf\n          configMap:\n            name: redis\n            defaultMode: 420\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\nspec:\n  ports:\n    - name: http6379\n      port: 6379\n      protocol: TCP\n      targetPort: 6379\n  selector:\n    app: redis\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: redis\ndata:\n  config: |\n    appendonly  no\n    databases  16\n    maxmemory  200mb\n    maxmemory-policy  allkeys-lru\n    protected-mode  no\n')))}m.isMDXComponent=!0}}]);