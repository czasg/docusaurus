"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1268],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(t),u=a,y=p["".concat(l,".").concat(u)]||p[u]||m[u]||o;return t?r.createElement(y,s(s({ref:n},c),{},{components:t})):r.createElement(y,s({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var d=2;d<o;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4078:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const o={title:"Redis",sidebar_label:"Redis",hide_title:!0,hide_table_of_contents:!1,slug:"redis"},s=void 0,i={unversionedId:"deploy/redis",id:"deploy/redis",title:"Redis",description:"\u53c2\u8003\u6587\u6863\uff1a",source:"@site/docs/develop/deploy/redis.md",sourceDirName:"deploy",slug:"/deploy/redis",permalink:"/docusaurus/docs/develop/deploy/redis",draft:!1,editUrl:"https://github.com/czasg/docusaurus/edit/main/docs/develop/deploy/redis.md",tags:[],version:"current",frontMatter:{title:"Redis",sidebar_label:"Redis",hide_title:!0,hide_table_of_contents:!1,slug:"redis"},sidebar:"tutorialSidebar",previous:{title:"RabbitMQ",permalink:"/docusaurus/docs/develop/deploy/rabbitmq"}},l={},d=[{value:"\u53c2\u8003\u6587\u6863\uff1a",id:"\u53c2\u8003\u6587\u6863",level:4},{value:"Docker \u90e8\u7f72",id:"docker-\u90e8\u7f72",level:3},{value:"DockerCompose \u90e8\u7f72",id:"dockercompose-\u90e8\u7f72",level:3},{value:"K8S \u90e8\u7f72",id:"k8s-\u90e8\u7f72",level:3}],c={toc:d},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"\u53c2\u8003\u6587\u6863"},"\u53c2\u8003\u6587\u6863\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/bitnami/redis"},"https://hub.docker.com/r/bitnami/redis"))),(0,a.kt)("h3",{id:"docker-\u90e8\u7f72"},"Docker \u90e8\u7f72"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -it --name redis --hostname redis -p 6379:6379 \\\n    -v /path/to/redis-persistence:/bitnami/redis/data \\\n    -e ALLOW_EMPTY_PASSWORD=yes \\\n    bitnami/redis:latest\n")),(0,a.kt)("h3",{id:"dockercompose-\u90e8\u7f72"},"DockerCompose \u90e8\u7f72"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="\u4e3b\u4ece\u96c6\u7fa4"',title:'"\u4e3b\u4ece\u96c6\u7fa4"'},"version: '2'\nservices:\n  redis-master:\n    image: 'bitnami/redis:latest'\n    ports:\n      - '6379'\n    environment:\n      - REDIS_REPLICATION_MODE=master\n      - REDIS_PASSWORD=my_master_password\n    volumes:\n      - '/path/to/redis-persistence:/bitnami'\n  redis-replica:\n    image: 'bitnami/redis:latest'\n    ports:\n      - '6379'\n    depends_on:\n      - redis-master\n    environment:\n      - REDIS_REPLICATION_MODE=slave\n      - REDIS_MASTER_HOST=redis-master\n      - REDIS_MASTER_PORT_NUMBER=6379\n      - REDIS_MASTER_PASSWORD=my_master_password\n      - REDIS_PASSWORD=my_replica_password\n")),(0,a.kt)("h3",{id:"k8s-\u90e8\u7f72"},"K8S \u90e8\u7f72"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: redis\n  name: redis\nspec:\n  replicas: 1\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: redis\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: redis\n      annotations:\n        co.elastic.logs: "false"\n        co.elastic.logs/enabled: "false"\n        co.elastic.logs/json.add_error_key: "true"\n        co.elastic.logs/json.ignore_decoding_error: "true"\n        co.elastic.logs/json.keys_under_root: "false"\n        co.elastic.logs/processors.add_fields.fields.index: elk-index-redis\n        co.elastic.logs/processors.timestamp.field: json.time\n        co.elastic.logs/processors.timestamp.layouts: UNIX_MS\n        co.elastic.logs/processors.timestamp.timezone: Asia/Shanghai\n    spec:\n      hostname: redis\n      containers:\n        - image: bitnami/redis:latest\n          imagePullPolicy: Always\n          envFrom:\n            - configMapRef:\n                name: redis\n          name: redis\n          ports:\n            - containerPort: 9092\n              name: redis\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 1000Mi\n            requests:\n              cpu: 100m\n              memory: 100Mi\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n            - mountPath: /bitnami/redis/data\n              name: storage\n      restartPolicy: Always\n      volumes:\n        - name: host-time\n          hostPath:\n            path: /etc/localtime\n            type: ""\n        - name: storage\n          emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\nspec:\n  ports:\n    - name: redis6379\n      port: 6379\n      protocol: TCP\n      targetPort: 6379\n  selector:\n    app: redis\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-nodeport\nspec:\n  ports:\n    - name: redis-nodeport\n      port: 6379\n      protocol: TCP\n      targetPort: 6379\n  selector:\n    app: redis\n  sessionAffinity: None\n  type: NodePort\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: redis\ndata:\n  REDIS_PASSWORD: "redis"\n')))}m.isMDXComponent=!0}}]);