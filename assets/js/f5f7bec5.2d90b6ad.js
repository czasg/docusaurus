"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5595],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},b="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=m(t),d=a,u=b["".concat(l,".").concat(d)]||b[d]||p[d]||i;return t?r.createElement(u,o(o({ref:n},c),{},{components:t})):r.createElement(u,o({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[b]="string"==typeof e?e:a,o[1]=s;for(var m=2;m<i;m++)o[m]=t[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},16198:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var r=t(87462),a=(t(67294),t(3905));const i={title:"RabbitMQ",sidebar_label:"RabbitMQ",hide_title:!0,hide_table_of_contents:!1,slug:"rabbitmq"},o=void 0,s={unversionedId:"deploy/rabbitmq",id:"deploy/rabbitmq",title:"RabbitMQ",description:"\u53c2\u8003\u6587\u6863\uff1a",source:"@site/docs/develop/deploy/rabbitmq.md",sourceDirName:"deploy",slug:"/deploy/rabbitmq",permalink:"/docusaurus/docs/develop/deploy/rabbitmq",draft:!1,editUrl:"https://github.com/czasg/docusaurus/edit/main/docs/develop/deploy/rabbitmq.md",tags:[],version:"current",frontMatter:{title:"RabbitMQ",sidebar_label:"RabbitMQ",hide_title:!0,hide_table_of_contents:!1,slug:"rabbitmq"},sidebar:"tutorialSidebar",previous:{title:"PostgresQL",permalink:"/docusaurus/docs/develop/deploy/postgres"},next:{title:"Redis",permalink:"/docusaurus/docs/develop/deploy/redis"}},l={},m=[{value:"\u53c2\u8003\u6587\u6863\uff1a",id:"\u53c2\u8003\u6587\u6863",level:4},{value:"Docker \u90e8\u7f72",id:"docker-\u90e8\u7f72",level:3},{value:"DockerCompose \u90e8\u7f72",id:"dockercompose-\u90e8\u7f72",level:3},{value:"K8S \u90e8\u7f72",id:"k8s-\u90e8\u7f72",level:3}],c={toc:m},b="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(b,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"\u53c2\u8003\u6587\u6863"},"\u53c2\u8003\u6587\u6863\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/bitnami/rabbitmq"},"https://hub.docker.com/r/bitnami/rabbitmq"))),(0,a.kt)("h3",{id:"docker-\u90e8\u7f72"},"Docker \u90e8\u7f72"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -it --name rabbitmq --hostname rabbitmq -p 5672:5672 -p 15672:15672 \\\n    -v /path/to/rabbitmq-persistence:/bitnami/rabbitmq/mnesia \\\n    -e RABBITMQ_USERNAME=admin \\\n    -e RABBITMQ_PASSWORD=admin \\\n    bitnami/rabbitmq:latest\n")),(0,a.kt)("h3",{id:"dockercompose-\u90e8\u7f72"},"DockerCompose \u90e8\u7f72"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="\u4e3b\u4ece\u96c6\u7fa4"',title:'"\u4e3b\u4ece\u96c6\u7fa4"'},"version: '2'\nservices:\n  stats:\n    image: bitnami/rabbitmq\n    environment:\n      - RABBITMQ_NODE_TYPE=stats\n      - RABBITMQ_NODE_NAME=rabbit@stats\n      - RABBITMQ_ERL_COOKIE=s3cr3tc00ki3\n    ports:\n      - '15672:15672'\n    volumes:\n      - 'rabbitmqstats_data:/bitnami/rabbitmq/mnesia'\n  queue-disc1:\n    image: bitnami/rabbitmq\n    environment:\n      - RABBITMQ_NODE_TYPE=queue-disc\n      - RABBITMQ_NODE_NAME=rabbit@queue-disc1\n      - RABBITMQ_CLUSTER_NODE_NAME=rabbit@stats\n      - RABBITMQ_ERL_COOKIE=s3cr3tc00ki3\n    volumes:\n      - 'rabbitmqdisc1_data:/bitnami/rabbitmq/mnesia'\n  queue-ram1:\n    image: bitnami/rabbitmq\n    environment:\n      - RABBITMQ_NODE_TYPE=queue-ram\n      - RABBITMQ_NODE_NAME=rabbit@queue-ram1\n      - RABBITMQ_CLUSTER_NODE_NAME=rabbit@stats\n      - RABBITMQ_ERL_COOKIE=s3cr3tc00ki3\n    volumes:\n      - 'rabbitmqram1_data:/bitnami/rabbitmq/mnesia'\nvolumes:\n  rabbitmqstats_data:\n    driver: local\n  rabbitmqdisc1_data:\n    driver: local\n  rabbitmqram1_data:\n    driver: local\n")),(0,a.kt)("h3",{id:"k8s-\u90e8\u7f72"},"K8S \u90e8\u7f72"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: rabbitmq\n  name: rabbitmq\nspec:\n  replicas: 1\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: rabbitmq\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: rabbitmq\n      annotations:\n        co.elastic.logs: "false"\n        co.elastic.logs/enabled: "false"\n        co.elastic.logs/json.add_error_key: "true"\n        co.elastic.logs/json.ignore_decoding_error: "true"\n        co.elastic.logs/json.keys_under_root: "false"\n        co.elastic.logs/processors.add_fields.fields.index: elk-index-rabbitmq\n        co.elastic.logs/processors.timestamp.field: json.time\n        co.elastic.logs/processors.timestamp.layouts: UNIX_MS\n        co.elastic.logs/processors.timestamp.timezone: Asia/Shanghai\n    spec:\n      hostname: rabbitmq\n      containers:\n        - image: bitnami/rabbitmq:latest\n          imagePullPolicy: Always\n          envFrom:\n            - configMapRef:\n                name: rabbitmq\n          name: rabbitmq\n          livenessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 300\n            periodSeconds: 20\n            successThreshold: 1\n            tcpSocket:\n              port: 5672\n            timeoutSeconds: 5\n          readinessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 5\n            periodSeconds: 40\n            successThreshold: 1\n            tcpSocket:\n              port: 5672\n            timeoutSeconds: 2\n          ports:\n            - containerPort: 5672\n              name: tcp5672\n              protocol: TCP\n            - containerPort: 15672\n              name: tcp15672\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 1000Mi\n            requests:\n              cpu: 100m\n              memory: 100Mi\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n            - mountPath: /bitnami/rabbitmq/mnesia\n              name: storage\n      restartPolicy: Always\n      volumes:\n        - name: host-time\n          hostPath:\n            path: /etc/localtime\n            type: ""\n        - name: storage\n          emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: rabbitmq\nspec:\n  ports:\n    - name: tcp5672\n      port: 5672\n      protocol: TCP\n      targetPort: 5672\n    - name: tcp15672\n      port: 15672\n      protocol: TCP\n      targetPort: 15672\n    - name: management80\n      port: 80\n      protocol: TCP\n      targetPort: 15672\n  selector:\n    app: rabbitmq\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: rabbitmq\ndata:\n  RABBITMQ_PASSWORD: "admin"\n  RABBITMQ_SECURE_PASSWORD: "admin"\n---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: rabbitmq\n  annotations:\n    nginx.ingress.kubernetes.io/proxy-body-size: "5M"\n    nginx.ingress.kubernetes.io/proxy-connect-timeout: "1200"\n    nginx.ingress.kubernetes.io/proxy-send-timeout: "1200"\n    nginx.ingress.kubernetes.io/proxy-read-timeout: "1200"\nspec:\n  rules:\n    - host: rabbitmq.domain\n      http:\n        paths:\n          - backend:\n              serviceName: rabbitmq\n              servicePort: 80\n')))}p.isMDXComponent=!0}}]);