"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1083],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=i(n),u=o,g=m["".concat(p,".").concat(u)]||m[u]||d[u]||s;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var i=2;i<s;i++)a[i]=n[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},482:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var r=n(7462),o=(n(7294),n(3905));const s={title:"PostgresQL",sidebar_label:"PostgresQL",hide_title:!0,hide_table_of_contents:!1,slug:"postgres"},a=void 0,l={unversionedId:"deploy/mongo",id:"deploy/mongo",title:"PostgresQL",description:"\u53c2\u8003\u6587\u6863\uff1a",source:"@site/docs/develop/deploy/mongo.md",sourceDirName:"deploy",slug:"/deploy/postgres",permalink:"/docusaurus/docs/develop/deploy/postgres",draft:!1,editUrl:"https://github.com/czasg/docusaurus/edit/main/docs/develop/deploy/mongo.md",tags:[],version:"current",frontMatter:{title:"PostgresQL",sidebar_label:"PostgresQL",hide_title:!0,hide_table_of_contents:!1,slug:"postgres"},sidebar:"tutorialSidebar",previous:{title:"Kafka",permalink:"/docusaurus/docs/develop/deploy/kafka"},next:{title:"MySQL",permalink:"/docusaurus/docs/develop/deploy/mysql"}},p={},i=[{value:"\u53c2\u8003\u6587\u6863\uff1a",id:"\u53c2\u8003\u6587\u6863",level:4},{value:"Docker \u90e8\u7f72",id:"docker-\u90e8\u7f72",level:3},{value:"DockerCompose \u90e8\u7f72",id:"dockercompose-\u90e8\u7f72",level:3},{value:"K8S \u90e8\u7f72",id:"k8s-\u90e8\u7f72",level:3}],c={toc:i},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"\u53c2\u8003\u6587\u6863"},"\u53c2\u8003\u6587\u6863\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/bitnami/postgresql"},"https://hub.docker.com/r/bitnami/postgresql"))),(0,o.kt)("h3",{id:"docker-\u90e8\u7f72"},"Docker \u90e8\u7f72"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -it --name postgresql --hostname postgresql -p 5432:5432 \\\n    -v /path/to/postgresql-persistence:/bitnami/postgresql \\\n    -e POSTGRESQL_USERNAME=my_user \\\n    -e POSTGRESQL_PASSWORD=password123 \\\n    -e POSTGRESQL_DATABASE=my_database \\\n    bitnami/postgresql:latest\n")),(0,o.kt)("h3",{id:"dockercompose-\u90e8\u7f72"},"DockerCompose \u90e8\u7f72"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="\u4e3b\u4ece\u96c6\u7fa4"',title:'"\u4e3b\u4ece\u96c6\u7fa4"'},"version: '2'\nservices:\n  postgresql-master:\n    image: 'bitnami/postgresql:latest'\n    ports:\n      - '5432'\n    volumes:\n      - 'postgresql_master_data:/bitnami/postgresql'\n    environment:\n      - POSTGRESQL_REPLICATION_MODE=master\n      - POSTGRESQL_REPLICATION_USER=repl_user\n      - POSTGRESQL_REPLICATION_PASSWORD=repl_password\n      - POSTGRESQL_USERNAME=my_user\n      - POSTGRESQL_PASSWORD=my_password\n      - POSTGRESQL_DATABASE=my_database\n  postgresql-slave:\n    image: 'bitnami/postgresql:latest'\n    ports:\n      - '5432'\n    depends_on:\n      - postgresql-master\n    environment:\n      - POSTGRESQL_REPLICATION_MODE=slave\n      - POSTGRESQL_REPLICATION_USER=repl_user\n      - POSTGRESQL_REPLICATION_PASSWORD=repl_password\n      - POSTGRESQL_MASTER_HOST=postgresql-master\n      - POSTGRESQL_PASSWORD=my_password\n      - POSTGRESQL_MASTER_PORT_NUMBER=5432\nvolumes:\n  postgresql_master_data:\n")),(0,o.kt)("h3",{id:"k8s-\u90e8\u7f72"},"K8S \u90e8\u7f72"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: postgres\n  name: postgres\nspec:\n  replicas: 1\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: postgres\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: postgres\n      annotations:\n        co.elastic.logs: "false"\n        co.elastic.logs/enabled: "false"\n        co.elastic.logs/json.add_error_key: "true"\n        co.elastic.logs/json.ignore_decoding_error: "true"\n        co.elastic.logs/json.keys_under_root: "false"\n        co.elastic.logs/processors.add_fields.fields.index: elk-index-postgres\n        co.elastic.logs/processors.timestamp.field: json.time\n        co.elastic.logs/processors.timestamp.layouts: UNIX_MS\n        co.elastic.logs/processors.timestamp.timezone: Asia/Shanghai\n    spec:\n      hostname: postgres\n      containers:\n        - image: bitnami/postgresql:latest\n          imagePullPolicy: Always\n          envFrom:\n            - configMapRef:\n                name: postgres\n          name: postgres\n          ports:\n            - containerPort: 5432\n              name: postgres\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 1000Mi\n            requests:\n              cpu: 100m\n              memory: 100Mi\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n            - mountPath: /bitnami/postgresql\n              name: storage\n      restartPolicy: Always\n      volumes:\n        - name: host-time\n          hostPath:\n            path: /etc/localtime\n            type: ""\n        - name: storage\n          emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\nspec:\n  ports:\n    - name: postgres5432\n      port: 5432\n      protocol: TCP\n      targetPort: 5432\n  selector:\n    app: postgres\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres-nodeport\nspec:\n  ports:\n    - name: postgres-nodeport\n      port: 5432\n      protocol: TCP\n      targetPort: 5432\n  selector:\n    app: postgres\n  sessionAffinity: None\n  type: NodePort\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: postgres\ndata:\n  POSTGRESQL_USERNAME: "my_user"\n  POSTGRESQL_PASSWORD: "my_password"\n  POSTGRESQL_DATABASE: "my_database"\n')))}d.isMDXComponent=!0}}]);