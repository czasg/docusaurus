"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4914],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>y});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return r?t.createElement(y,s(s({ref:n},p),{},{components:r})):t.createElement(y,s({ref:n},p))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2838:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=r(7462),a=(r(7294),r(3905));const o={title:"redis"},s=void 0,i={unversionedId:"\u90e8\u7f72/redis",id:"\u90e8\u7f72/redis",title:"redis",description:"docker",source:"@site/docs/\u90e8\u7f72/redis.md",sourceDirName:"\u90e8\u7f72",slug:"/\u90e8\u7f72/redis",permalink:"/docusaurus/docs/\u90e8\u7f72/redis",draft:!1,editUrl:"https://github.com/czasg/docusaurus/edit/main/docs/\u90e8\u7f72/redis.md",tags:[],version:"current",frontMatter:{title:"redis"},sidebar:"defaultSidebar",previous:{title:"rabbitmq",permalink:"/docusaurus/docs/\u90e8\u7f72/rabbitmq"},next:{title:"\u5251\u6765",permalink:"/docusaurus/docs/\u9e21\u6c64/\u5251\u6765"}},l={},c=[{value:"docker",id:"docker",level:2},{value:"docker-compose",id:"docker-compose",level:2},{value:"kubectl",id:"kubectl",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...r}=e;return(0,a.kt)(d,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"docker"},"docker"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"docker run -it --rm --name redis-server -p 6379:6379 redis\n")),(0,a.kt)("h2",{id:"docker-compose"},"docker-compose"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="docker-compose.yaml"',title:'"docker-compose.yaml"'},'version: "2.3"\nservices:\n  redis:\n    image: redis:latest\n    ports:\n    - "6379:6379"\n    volumes:\n      - "/data:/data"\n')),(0,a.kt)("h2",{id:"kubectl"},"kubectl"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: redis-lru\n  name: redis-lru\nspec:\n  replicas: 1\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: redis-lru\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: redis-lru\n      annotations:\n        co.elastic.logs: "false"\n    spec:\n      containers:\n        - name: redis-lru\n          image: "redis:latest"\n          imagePullPolicy: Always\n          args:\n            - --appendonly\n            - "yes"\n            - --no-appendfsync-on-rewrite\n            - "yes"\n            - --databases\n            - "16"\n            - --maxmemory\n            - "2g"\n            - --maxmemory-policy\n            - "allkeys-lru"\n            - --loglevel\n            - "warning"\n            - --requirepass\n            - "redislru"\n          livenessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 300\n            periodSeconds: 20\n            successThreshold: 1\n            tcpSocket:\n              port: 6379\n            timeoutSeconds: 5\n          readinessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 5\n            periodSeconds: 40\n            successThreshold: 1\n            tcpSocket:\n              port: 6379\n            timeoutSeconds: 2\n          ports:\n            - containerPort: 6379\n              name: 6379tcp\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 2048Mi\n            requests:\n              cpu: 1000m\n              memory: 2048Mi\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n            - mountPath: /data\n              name: redis-data\n      restartPolicy: Always\n      volumes:\n        - hostPath:\n            path: /etc/localtime\n            type: ""\n          name: host-time\n        - name: redis-data\n          persistentVolumeClaim:\n            claimName: redis-lru\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-lru\nspec:\n  ports:\n    - name: tcp6379\n      port: 6379\n      protocol: TCP\n      targetPort: 6379\n  selector:\n    app: redis-lru\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-lru-node\nspec:\n  selector:\n    app: redis-lru\n  ports:\n    - name: tcp6379\n      port: 6379\n      protocol: TCP\n      targetPort: 6379\n  sessionAffinity: None\n  type: NodePort\n')))}u.isMDXComponent=!0}}]);