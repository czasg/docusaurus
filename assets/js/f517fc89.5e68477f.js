"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6828],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,g=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[u]="string"==typeof e?e:a,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5205:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={title:"postgres"},s=void 0,c={unversionedId:"\u90e8\u7f72/postgres",id:"\u90e8\u7f72/postgres",title:"postgres",description:"docker",source:"@site/docs/\u90e8\u7f72/postgres.md",sourceDirName:"\u90e8\u7f72",slug:"/\u90e8\u7f72/postgres",permalink:"/docusaurus/docs/\u90e8\u7f72/postgres",draft:!1,editUrl:"https://github.com/czasg/docusaurus/edit/main/docs/\u90e8\u7f72/postgres.md",tags:[],version:"current",frontMatter:{title:"postgres"},sidebar:"defaultSidebar",previous:{title:"nginx",permalink:"/docusaurus/docs/\u90e8\u7f72/nginx"},next:{title:"rabbitmq",permalink:"/docusaurus/docs/\u90e8\u7f72/rabbitmq"}},i={},l=[{value:"docker",id:"docker",level:2},{value:"kubectl",id:"kubectl",level:2}],p={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"docker"},"docker"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"docker pull postgres\ndocker run -it --rm --name postgres -p 5432:5432 postgres\n")),(0,a.kt)("h2",{id:"kubectl"},"kubectl"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: junkv\n  name: junkv\nspec:\n  replicas: 1\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: junkv\n  template:\n    metadata:\n      labels:\n        app: junkv\n    spec:\n      initContainers:\n        - image: busybox:latest\n          name: fill-pgdata\n          command: ["sh", "-c", "cp -r /data/* /pgdata/"]\n          volumeMounts:\n            - mountPath: /pgdata\n              name: pgdata\n            - mountPath: /data\n              name: data\n      containers:\n        - image: postgres:latest\n          imagePullPolicy: Always\n          name: postgres\n          lifecycle:\n            postStart:\n              exec:\n                command: ["/bin/sh", "-c", "while ! pg_isready ; do sleep 3; done; echo success;"]\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 2000Mi\n            requests:\n              cpu: 1000m\n              memory: 2000Mi\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n            - mountPath: /var/lib/postgresql/data\n              name: pgdata\n      restartPolicy: Always\n      volumes:\n        - hostPath:\n            path: /etc/localtime\n            type: ""\n          name: host-time\n        - name: pgdata\n          emptyDir: {}\n        - name: data\n          emptyDir: {}\n')))}m.isMDXComponent=!0}}]);