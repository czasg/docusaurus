"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1268],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var r=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(t),u=s,y=p["".concat(l,".").concat(u)]||p[u]||m[u]||o;return t?r.createElement(y,a(a({ref:n},c),{},{components:t})):r.createElement(y,a({ref:n},c))}));function y(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[p]="string"==typeof e?e:s,a[1]=i;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},64078:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=t(87462),s=(t(67294),t(3905));const o={title:"Redis",sidebar_label:"Redis",hide_title:!0,hide_table_of_contents:!1,slug:"redis"},a=void 0,i={unversionedId:"deploy/redis",id:"deploy/redis",title:"Redis",description:"\u53c2\u8003\u6587\u6863\uff1a",source:"@site/docs/develop/deploy/redis.md",sourceDirName:"deploy",slug:"/deploy/redis",permalink:"/docusaurus/docs/develop/deploy/redis",draft:!1,editUrl:"https://github.com/czasg/docusaurus/edit/main/docs/develop/deploy/redis.md",tags:[],version:"current",frontMatter:{title:"Redis",sidebar_label:"Redis",hide_title:!0,hide_table_of_contents:!1,slug:"redis"},sidebar:"tutorialSidebar",previous:{title:"RabbitMQ",permalink:"/docusaurus/docs/develop/deploy/rabbitmq"}},l={},d=[{value:"\u53c2\u8003\u6587\u6863\uff1a",id:"\u53c2\u8003\u6587\u6863",level:4},{value:"Docker \u90e8\u7f72",id:"docker-\u90e8\u7f72",level:3},{value:"DockerCompose \u90e8\u7f72",id:"dockercompose-\u90e8\u7f72",level:3},{value:"K8S \u90e8\u7f72",id:"k8s-\u90e8\u7f72",level:3}],c={toc:d},p="wrapper";function m(e){let{components:n,...t}=e;return(0,s.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h4",{id:"\u53c2\u8003\u6587\u6863"},"\u53c2\u8003\u6587\u6863\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://hub.docker.com/r/bitnami/redis"},"https://hub.docker.com/r/bitnami/redis"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="redis \u914d\u7f6e"',title:'"redis','\u914d\u7f6e"':!0},'# \u5728\u540e\u53f0\u8fd0\u884c\ndaemonize yes\n# \u7ed1\u5b9a\u7684IP\u5730\u5740\uff0c\u5982\u679c\u8981\u5141\u8bb8\u5916\u90e8\u8bbf\u95ee\uff0c\u8bbe\u7f6e\u4e3a0.0.0.0\nbind 127.0.0.1\n# \u76d1\u542c\u7684\u7aef\u53e3\u53f7\nport 6379\n# \u6570\u636e\u6301\u4e45\u5316\u9009\u9879\nsave 900 1\nsave 300 10\nsave 60 10000\n# \u6301\u4e45\u5316\u6587\u4ef6\u540d\ndbfilename dump.rdb\n# \u6301\u4e45\u5316\u6587\u4ef6\u4fdd\u5b58\u7684\u76ee\u5f55\ndir /var/lib/redis/\n# \u8bbe\u7f6e\u5bc6\u7801\u8fdb\u884c\u8fde\u63a5\u8ba4\u8bc1\nrequirepass yourpassword\n# \u662f\u5426\u5f00\u542fAOF\uff08Append-Only File\uff09\u6301\u4e45\u5316\nappendonly yes\n# AOF\u6301\u4e45\u5316\u6587\u4ef6\u540d\nappendfilename "appendonly.aof"\n# AOF\u6301\u4e45\u5316\u7b56\u7565\nappendfsync everysec\n# \u662f\u5426\u5f00\u542fRDB\u538b\u7f29\nrdbcompression yes\n# \u6700\u5927\u8fde\u63a5\u6570\nmaxclients 10000\n# \u5185\u5b58\u4f7f\u7528\u8b66\u544a\u9608\u503c\nmaxmemory-policy allkeys-lru\n# \u542f\u7528\u952e\u7a7a\u95f4\u901a\u77e5\nnotify-keyspace-events Ex\n# \u662f\u5426\u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f\ncluster-enabled yes\n# \u5176\u4ed6\nno-appendfsync-on-rewrite yes\ndatabases 16\nmaxmemory 2g\nloglevel warning\n')),(0,s.kt)("h3",{id:"docker-\u90e8\u7f72"},"Docker \u90e8\u7f72"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --rm -it --name redis --hostname redis -p 6379:6379 \\\n    -v /path/to/redis-persistence:/bitnami/redis/data \\\n    -v /path/to/your_redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf \\\n    -e ALLOW_EMPTY_PASSWORD=yes \\\n    bitnami/redis:latest\n")),(0,s.kt)("h3",{id:"dockercompose-\u90e8\u7f72"},"DockerCompose \u90e8\u7f72"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="\u4e3b\u4ece\u96c6\u7fa4"',title:'"\u4e3b\u4ece\u96c6\u7fa4"'},"version: '2'\nservices:\n  redis-master:\n    image: 'bitnami/redis:latest'\n    ports:\n      - '6379'\n    environment:\n      - REDIS_REPLICATION_MODE=master\n      - REDIS_PASSWORD=my_master_password\n    volumes:\n      - '/path/to/redis-persistence:/bitnami'\n  redis-replica:\n    image: 'bitnami/redis:latest'\n    ports:\n      - '6379'\n    depends_on:\n      - redis-master\n    environment:\n      - REDIS_REPLICATION_MODE=slave\n      - REDIS_MASTER_HOST=redis-master\n      - REDIS_MASTER_PORT_NUMBER=6379\n      - REDIS_MASTER_PASSWORD=my_master_password\n      - REDIS_PASSWORD=my_replica_password\n")),(0,s.kt)("h3",{id:"k8s-\u90e8\u7f72"},"K8S \u90e8\u7f72"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: redis\n  name: redis\nspec:\n  replicas: 1\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: redis\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        app: redis\n      annotations:\n        co.elastic.logs: "false"\n        co.elastic.logs/enabled: "false"\n        co.elastic.logs/json.add_error_key: "true"\n        co.elastic.logs/json.ignore_decoding_error: "true"\n        co.elastic.logs/json.keys_under_root: "false"\n        co.elastic.logs/processors.add_fields.fields.index: elk-index-redis\n        co.elastic.logs/processors.timestamp.field: json.time\n        co.elastic.logs/processors.timestamp.layouts: UNIX_MS\n        co.elastic.logs/processors.timestamp.timezone: Asia/Shanghai\n    spec:\n      hostname: redis\n      containers:\n        - image: bitnami/redis:latest\n          imagePullPolicy: Always\n          envFrom:\n            - configMapRef:\n                name: redis\n          name: redis\n          livenessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 300\n            periodSeconds: 20\n            successThreshold: 1\n            tcpSocket:\n              port: 6379\n            timeoutSeconds: 5\n          readinessProbe:\n            failureThreshold: 3\n            initialDelaySeconds: 5\n            periodSeconds: 40\n            successThreshold: 1\n            tcpSocket:\n              port: 6379\n            timeoutSeconds: 2\n          ports:\n            - containerPort: 9092\n              name: redis\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 1000Mi\n            requests:\n              cpu: 100m\n              memory: 100Mi\n          volumeMounts:\n            - mountPath: /etc/localtime\n              name: host-time\n              readOnly: true\n            - mountPath: /bitnami/redis/data\n              name: storage\n      restartPolicy: Always\n      volumes:\n        - name: host-time\n          hostPath:\n            path: /etc/localtime\n            type: ""\n        - name: storage\n          emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis\nspec:\n  ports:\n    - name: redis6379\n      port: 6379\n      protocol: TCP\n      targetPort: 6379\n  selector:\n    app: redis\n  sessionAffinity: None\n  type: ClusterIP\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-nodeport\nspec:\n  ports:\n    - name: redis-nodeport\n      port: 6379\n      protocol: TCP\n      targetPort: 6379\n  selector:\n    app: redis\n  sessionAffinity: None\n  type: NodePort\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: redis\ndata:\n  REDIS_PASSWORD: "redis"\n')))}m.isMDXComponent=!0}}]);