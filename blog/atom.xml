<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://czasg.github.io/docusaurus/blog</id>
    <title>Czasg Blog</title>
    <updated>2021-12-13T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://czasg.github.io/docusaurus/blog"/>
    <subtitle>Czasg Blog</subtitle>
    <icon>https://czasg.github.io/docusaurus/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[基于 gRPC 实现负载均衡]]></title>
        <id>基于 gRPC 实现负载均衡</id>
        <link href="https://czasg.github.io/docusaurus/blog/2021/12/13/gRPC负载均衡"/>
        <updated>2021-12-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文主要介绍在 k8s 环境下 gRPC 服务在实现负载均衡时遇到的问题和解决思路。]]></summary>
        <content type="html"><![CDATA[<p>本文主要介绍在 k8s 环境下 gRPC 服务在实现负载均衡时遇到的问题和解决思路。</p><h2>概述</h2><p>我们的 gRPC 服务最初使用 <code>DaemonSet</code> 类型的资源对象部署在 k8s 上，通过节点亲和属性 <code>nodeAffinity</code>，使得单台宿主机仅运行这一个 <code>Pod</code>，然后通过 <code>NodePort Service</code> 的方式对外暴露服务。</p><p>在这种场景下直接对外暴露 IP 提供服务，业务流量全部打到单台宿主机上，所以也不存在负载均衡的说法。</p><p>随着业务压力逐渐增大，单点提供的能力已逐渐达到极限，我们采用水平拓展的方式，部署了多台单节点服务。也算暂时抗住了压力。但随后的暴露的问题，也让我们被迫选选择了重构。</p><p>:::note 为什么选择重构
业务持续拓展，问题也逐渐暴露出来，当前服务架构下，多节点之间的数据一致性完全不能保证，人工运维简直不要太恶心，无奈只能重构。这里我们不针对此展开。<br/>
<!-- -->:::</p><p>服务改造升级完毕后，完全兼容历史 gRPC 接口，在 k8s 的配置上也有部分改动，以前的 <code>DaemontSet</code> 类型变更为 <code>Deployment</code> 类型，而 <code>NodePort Service</code> 类型则变更为 <code>ClusterIP Service</code> 类型。
项目正式进入到了提测阶段。</p><p>功能上基本没有太大的问题，毕竟引用了相同的 gRPC 标准。</p><p>问题主要暴露在了负载均衡上，在多副本的场景下，发生了严重的流量倾斜，具体表现就是某个副本的压力非常高，而其他副本的压力很小，进而导致服务整体异常。</p><p>:::tip 简单分析
gRPC 是基于 HTTP2.0 实现的长连接，且默认没有超时，这种长连接能够大量减少 TCP 连接管理所带来的开销，但也破坏了标准的连接级的负载均衡。因为连接已经建立且不断开，也无法再进一步负载均衡了。  </p><p>那么再回到上述场景，显然就是客户端与某个具体的服务建立了长连接，而连接又不会断开，从而导致了持续的流量倾斜问题。
:::</p><p>选择有效的 gRPC 负载均衡方案，是解决我们当前问题的核心。</p><p>具体解决的方法有多种，我们主要将其分为：  </p><ul><li>用户侧的负载均衡</li><li>服务侧的负载均衡</li></ul><h2>gRPC 负载均衡 - 用户侧</h2><p>在用户侧的负载均衡中，用户根据配置解析出全部的 gRPC 服务，并为每一个服务都建立一次连接，然后由用户自己控制在各服务之间循环，实现负载均衡。
<img src="client-load-balancer.png"/></p><p>用户侧的方案可以很好的解决 gRPC 的负载均衡问题，且实施起来比较容易。但是当前方案无法感知新创建的服务。</p><h2>gRPC 负载均衡 - 服务侧</h2><p>在服务侧的负载均衡中，引入一个负载均衡代理，我们称之为 <code>Load Balancer</code>，用户向 LB 发起 RPC 请求，然后由该 LB 将 RPC 分配到一个可用的后端服务器上，
由该服务器提供 gRPC 服务，并将负载情况报告给 LB，进一步补全 LB 的负载信息。
<img src="server-load-balancer.png"/></p><p>服务侧的方案也可以很好的解决 gRPC 的负载均衡问题，负载由 LB 统一管理，可以很好的处理服务新增和删除的场景。但是实施难度较大。</p><h2>基于 Headless Service 和 MaxConnectionAge 实现负载均衡</h2><p>该方案基于用户侧实现负载均衡。</p><h2>基于 KubeResolver</h2><p>该方案基于用户侧实现负载均衡。</p><br/><p>:::info 👇👇👇
<strong>本文作者:</strong> Czasg<br/>
<strong>版权声明:</strong> 转载请注明出处哦~👮‍<br/>
<!-- -->:::</p>]]></content>
        <author>
            <name>Czasg</name>
            <uri>https://github.com/czasg</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github 搭建 Docusaurus 站点]]></title>
        <id>Github 搭建 Docusaurus 站点</id>
        <link href="https://czasg.github.io/docusaurus/blog/2021/12/3/Github搭建Docusaurus站点"/>
        <updated>2021-12-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[1、新建 Github 仓库]]></summary>
        <content type="html"><![CDATA[<h2>1、新建 Github 仓库</h2><p>首先，登录<a href="https://github.com/new">Github仓库创建页面</a>，我们创建一个全新的空白仓库，项目名命名为 <code>testDocusaurus</code>。</p><p>然后通过 <code>git</code> 将仓库拉取到本地，至此，我们拥有了一个全新的空白仓库 <code>testDocusaurus</code>。  </p><p><img src="gitindex.png"/></p><h2>2、初始化 Docusaurus 项目</h2><blockquote><p><a href="https://docusaurus.io/zh-CN/docs/installation">Docusaurus项目初始化细节请参考官方文档</a></p></blockquote><p>进入到仓库 <code>testDocusaurus</code> 所在的空白目录，并在此目录打开终端界面。</p><p>为了更好的完成接下来的步骤，你可能需要预先安装<strong>nodejs</strong>。在此，假设你已经准备完毕。<br/>
<!-- -->那我们接下来通过以下指令初始化一个 <code>Docusaurus</code> 项目。</p><pre><code class="language-shell" metastring="script">&gt;&gt;&gt; npx create-docusaurus@latest website classic
...
...
Successfully created &quot;website&quot;.
Inside that directory, you can run several commands:

  npm start
    Starts the development server.

  npm run build
    Bundles your website into static files for production.

  npm run serve
    Serves the built website locally.

  npm deploy
    Publishes the website to GitHub pages.

We recommend that you begin by typing:

  cd website
  npm start

Happy building awesome websites!
</code></pre><p>该指令运行完后，会输出一些简单的运行指令，而且我们应该可以看到一个 <code>website</code> 的目录，我们先将里面的内容剪贴出来，放到我们空白仓库目录下面。</p><p>此时，我们按照提示，运行 <code>npm start</code> 指令，我们就可以运行此项目。</p><p>通常启动端口为3000，则默认路径为：http://localhost:3000/  </p><p><img src="websiteindex.png"/></p><h2>3、搭建 Github Actions</h2><blockquote><p>Github Actions部署细节参考<a href="https://docusaurus.io/zh-CN/docs/deployment#deploying-to-github-pages">官方文档</a></p></blockquote><p>接入 <code>Github Actions</code> 需要创建一对新的 <strong>SSH Key</strong>，并将公钥和密钥均配置到 Github，我们来具体看下操作。</p><p>首先创建密钥，我们可以指定一个新的目录，然后得到公钥（id_rsa.pub）和私钥（id_rsa）</p><pre><code class="language-shell" metastring="script">&gt;&gt;&gt; ssh-keygen -t rsa -C &quot;email&quot;
...
...
The key&#x27;s randomart image is:
+---[RSA 3072]----+
| .=oo*=o=o.      |
| o+.=o==.o       |
|  .O.O=+o        |
|  ..=o@.oo       |
| . o +.+S+..     |
|  . + . E.o      |
|   o . .         |
|  .              |
|                 |
+----[SHA256]-----+
</code></pre><p>我们打开仓库的 <code>deploy keys</code>，选择新增，将 <code>id_rsa.pub</code> 中的内容复制进去，并选中 <code>Allow write access</code> 框，表示赋予部署写权限。
<img src="deploykey.png"/></p><p>此时部署公钥已经完成，我们再将私钥也配置上。打开同级配置下的 Secret，选择新增密钥，
我们将私钥内容复制到 <code>Value</code> 中，而 <code>Name</code> 填写 <code>GH_PAGES_DEPLOY</code> 即可。</p><p>最后，我们创建 <code>Github Actions</code>，将模板复制进去，则整个流水线就已经配置好了。复制时，将对应的基础配置改下即可，如下：</p><pre><code class="language-shell" metastring="script">git config --global user.email &quot;email&quot;
git config --global user.name &quot;name&quot;
</code></pre><p>这里的 <code>email</code> 需要是 github 配置的 email，而 <code>name</code> 则是 github 用户名。</p><h2>4、更新仓库，尝试自动部署</h2><p>确保 Github Pages 已经初始化好，那么我们往仓库推送修改时，就可以触发自动部署了。</p><br/><p>:::info 👇👇👇
<strong>本文作者:</strong> Czasg<br/>
<strong>版权声明:</strong> 转载请注明出处哦~👮‍<br/>
<!-- -->:::</p>]]></content>
        <author>
            <name>Czasg</name>
            <uri>https://github.com/czasg</uri>
        </author>
    </entry>
</feed>